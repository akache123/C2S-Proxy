CSE 156/L Programming Project: C2S Proxy

Author: Anurag Kache
Student ID: 1801243

-----------------------------------------------------------------------------------------------------------
Files:
-----------------------------------------------------------------------------------------------------------
1. src/
   Contains source files for the proxy server.
   - proxy.cpp: Source code for the proxy server implementation.

2. bin/
   Executable generated by the Makefile.
   - myproxy: The compiled proxy server executable.

3. doc/
   Documentation of your application in plain text or PDF format, containing information on the
   internal design, usage instructions, and limitations. It should also list the files in the submission
   with a brief description.
   - README.pdf: Detailed documentation of the project, including usage instructions and design.

4. Makefile
   Used to build the proxy server program from the required source files.

-----------------------------------------------------------------------------------------------------------
Documentation
-----------------------------------------------------------------------------------------------------------
Overview

This project involves the development of a proxy HTTP server that converts HTTP requests to HTTPS requests, handles access control based on a forbiddien sites file, and maintains logging functionality. 
The proxy server implements connection management and cleanup through a combination of strategies aimed at optimizing resource utilization and ensuring stable operation. 
Upon receiving incoming requests, the proxy establishes connections with clients and destination servers using socket communication. 
It tracks these connections throughout their lifecycle, managing persistent connections efficiently to minimize overhead. 
Timeout mechanisms are employed to handle idle or stalled connections, with appropriate cleanup procedures implemented to release associated resources upon connection termination. 
In cases where connections to forbidden sites are detected, the proxy promptly terminates these connections and deallocates resources to prevent resource leaks. 
Additionally, robust error handling mechanisms are in place to handle connection errors gracefully and facilitate recovery when necessary. 
Through logging and monitoring functionalities, the proxy server maintains visibility into connection activity and resource usage, enabling proactive management and ensuring optimal performance.

Project Structure
   The project consists of the following components:
   - Proxy Server (myproxy): The main executable responsible for implementing the proxy server.
   - Source Files (src/): Contains the source code for the proxy server implementation.
   - Executable (bin/): Contains the compiled executable for the proxy server.
   - Documentation (doc/): Contains detailed documentation of the project, including usage instructions
     and test cases.
   - Makefile: Used for building the proxy server executable from the source files.

Building and Running the Proxy Server
   - Clone the repository to your local machine.
   - Navigate to the project directory.
   - Run the `make` command to build the proxy server executable.
   - The compiled executable will be generated in the `bin/` directory.
   - Start the proxy server using the following command:
     ./myproxy listen_port forbidden_sites_file access_log_file
     Example: ./myproxy 8080 forbidden_sites.txt access.log

Logging
   The proxy server maintains an access log file called access.log to track all requests received.
   Each request is logged with the following information:
   - Date and time of the request
   - Client host name or IP address
   - Request line from the client
   - HTTP status code returned to the client
   - Length of the response to the client in bytes

Access Control and Forbidden Sites
   The proxy server reads the forbidden sites file specified during startup and blocks access to any
   sites listed in this file. It reloads the forbidden sites file upon receiving a 'Control-C' signal.

Test Cases should be performed to validate the functionality of the proxy server. Some suggested test
   cases include:
   
1) Accessing Allowed Website:

Command: ./myproxy 8080 forbidden_sites.txt access.log
Request Command: curl -x http://localhost:8080/ http://www.example.com
Description: Access a website not listed in the forbidden sites file.
Expected Output: Successful connection to the allowed website. The access log should record the request details.

2) Accessing Forbidden Website:

Command: ./myproxy 8080 forbidden_sites.txt access.log
Request Command: curl -x http://localhost:8080/ http://www.youtube.com
Description: Attempt to access a website listed in the forbidden sites file.
Expected Output: HTTP error response 403 (Forbidden URL) returned to the client. The access log should record the request details with the 403 status code.

3) Concurrent Requests Handling:

Command: ./myproxy 8080 forbidden_sites.txt access.log
Request Command: Open multiple browser tabs or terminals and simultaneously access different websites.
Description: Simultaneously send multiple requests to the proxy server.
Expected Output: All requests should be handled concurrently without errors. The access log should record each request received and responded to.
Access Control File Reloading:

4) Command: ./myproxy 8080 forbidden_sites.txt access.log

Request Command: [Press Control-C to send the signal]
Description: Send a 'Control-C' signal to the proxy server to trigger the reloading of the forbidden sites file.
Expected Output: Proxy server should reload the forbidden sites file without terminating. Subsequent requests should be checked against the updated forbidden sites list.

5) Invalid HTTP Method Request:

Command: ./myproxy 8080 forbidden_sites.txt access.log
Request Command: curl -X POST -x http://localhost:8080/ http://www.example.com
Description: Send an HTTP request with an unsupported method (e.g., POST).
Expected Output: HTTP error response 501 (Not implemented) returned to the client. The access log should record the request details with the 501 status code.

6) Accessing Allowed Website with wget:

Command: ./myproxy 8080 forbidden_sites.txt access.log
Request Command: wget --proxy=127.0.0.1:8080 http://www.example.com
Description: Use wget to access a website not listed in the forbidden sites file.
Expected Output: Successful connection to the allowed website. The access log should record the request details.

7) Accessing Forbidden Website with wget:

Command: ./myproxy 8080 forbidden_sites.txt access.log
Request Command: wget --proxy=127.0.0.1:8080 http://www.youtube.com
Description: Use wget to attempt to access a website listed in the forbidden sites file.
Expected Output: wget should receive an HTTP error response 403 (Forbidden URL). The access log should record the request details with the 403 status code.

8) Browser Testing - Accessing Allowed Website:

Command: ./myproxy 8080 forbidden_sites.txt access.log
Description: Configure a browser (e.g., Firefox) to use the proxy server running on localhost:8080. Access a website not listed in the forbidden sites file.
Expected Output: Successful connection to the allowed website. The access log should record the request details.

9) Browser Testing - Accessing Forbidden Website:

Command: ./myproxy 8080 forbidden_sites.txt access.log
Description: Configure a browser (e.g., Firefox) to use the proxy server running on localhost:8080. Attempt to access a website listed in the forbidden sites file.
Expected Output: Browser should display an error page indicating the website is forbidden. The access log should record the request details with the appropriate status code.



References

- Class Textbook: Unix Network Programming, Volume 1: The Sockets Networking API, 3/EW. Richard Stevens Bill Fenner M. Rudoff
- https://www.w3schools.com/cybersecurity/cybersecurity_network_transport.php
- https://stackoverflow.com/questions/11421678/how-to-make-a-proxy-server-in-c-using-boost 
- https://stackoverflow.com/questions/11211705/how-can-i-set-a-proxy-for-wget


